package com.team5.quanlyhocvu.service;

import com.team5.quanlyhocvu.model.Student;
import com.team5.quanlyhocvu.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class StudentService {

    @Autowired
    private StudentRepository studentRepository;

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ h·ªçc vi√™n
     */
    public List<Student> getAllStudents() {
        return studentRepository.findAll();
    }

    /**
     * L·∫•y th√¥ng tin h·ªçc vi√™n theo ID
     */
    public Optional<Student> getStudentById(Integer id) {
        return studentRepository.findById(id);
    }

    /**
     * T√¨m h·ªçc vi√™n theo email
     */
    public Optional<Student> getStudentByEmail(String email) {
        return studentRepository.findByEmail(email);
    }

    /**
     * L·∫•y danh s√°ch h·ªçc vi√™n theo level (VD: A2, B1, ...)
     */
    public List<Student> getStudentsByLevel(String level) {
        return studentRepository.findByLevel(level);
    }

    // L∆∞u √Ω: createStudent ƒë∆∞·ª£c gi·ªØ l·∫°i ·ªü ƒë√¢y cho CRUD c∆° b·∫£n, nh∆∞ng
    // trong logic ·ª©ng d·ª•ng, ch·ªâ ADMINService m·ªõi g·ªçi n√≥ ƒë·ªÉ t·∫°o User sau t∆∞ v·∫•n.
    public Student saveStudent(Student student) {
        return studentRepository.save(student);
    }

    /**
     * üìù C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n c·ªßa h·ªçc vi√™n (Update Profile)
     * ƒê√£ lo·∫°i b·ªè logic 'paid'
     */
    public Student updateStudentProfile(Integer id, Student newStudentData) {
        return studentRepository.findById(id)
                .map(student -> {
                    // C·∫≠p nh·∫≠t c√°c thu·ªôc t√≠nh k·∫ø th·ª´a t·ª´ Person
                    student.setFullname(newStudentData.getFullname());
                    student.setEmail(newStudentData.getEmail());
                    student.setPhone(newStudentData.getPhone()); // B·ªï sung
                    student.setDateOfBirth(newStudentData.getDateOfBirth());

                    // C·∫≠p nh·∫≠t thu·ªôc t√≠nh ri√™ng c·ªßa Student
                    student.setLevel(newStudentData.getLevel());
                    student.setAddress(newStudentData.getAddress()); // B·ªï sung

                    // KH√îNG C·∫¨P NH·∫¨T currentClassroomId T·∫†I ƒê√ÇY (AdminService s·∫Ω l√†m)
                    // KH√îNG C·∫¨P NH·∫¨T paid (PaymentService s·∫Ω l√†m)

                    return studentRepository.save(student);
                })
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y h·ªçc vi√™n c√≥ ID: " + id));
    }

    /**
     * Xo√° h·ªçc vi√™n theo ID (Delete)
     * L∆∞u √Ω: N·∫øu c√≥ Payment li√™n quan, c·∫ßn x·ª≠ l√Ω quan h·ªá (cascade delete ho·∫∑c r√†ng bu·ªôc).
     */
    public void deleteStudent(Integer id) {
        if (!studentRepository.existsById(id)) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y h·ªçc vi√™n c√≥ ID: " + id);
        }
        studentRepository.deleteById(id);
    }
}